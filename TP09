from math import floor, ceil, gcd

class Fraction:
    """Class representing a fraction and operations on it

    Author : V. Van den Schrieck
    Date : October 2021
    This class allows fraction manipulations through several operations.
    """

    def __init__(self, num=0, den=1):
        """This builds a fraction based on some numerator and denominator.

        PRE : num et den sont chacun un entier
        POST : initialise num, den et la fraction qu'ils composent
        RAISE: si den = 0 ou str : renvoie une exception
        """
        self.num = num
        self.den = den
        self.fraction = f"{self.num}/{self.den}"

        if self.den == 0 :
            raise ZeroDivisionError
        if type(self.num) == str or type(self.den) == str:
            raise ZeroDivisionError






    @property
    def numerator(self):
        return self.num

    @property
    def denominator(self):
        return self.den

    # ------------------ Textual representations ------------------

    def __str__(self):
        """Return a textual representation of the reduced form of the fraction

        PRE : le num et den sont initialisé
        POST : renvoie le num et den sous forme de fraction
        """
        return f"{self.num}/{self.den}"

    def as_mixed_number(self):
        """Return a textual representation of the reduced form of the fraction as a mixed number

        A mixed number is the sum of an integer and a proper fraction

        PRE : la fraction initialisé
        POST : renvoie la fraction sous forme nombre mix
        """
        nbr = abs(self.num) / self.den
        reste = abs(self.num) % self.den

        if self.num > 0 :
            if self.num < self.den:
                return f"{self.fraction}"
            if self.num % self.den == 0:
                return f"{floor(nbr)}"
            elif self.num % self.den != 0:
                return f"{floor(nbr)}*({reste}/{self.den})"


        if self.num < 0 :
            if self.num < self.den:
                return f"{self.fraction}"
            if self.num % self.den == 0: # -4/4
                return f"-{ceil(nbr)}"
            elif self.num % self.den != 0: # -5/4
                return f"-{ceil(nbr)}*({reste}/{self.den})"
        if self.num == 0 :
            return "O"


    # ------------------ Operators overloading ------------------

    def __add__(self, other):
        """Overloading of the + operator for fractions

         PRE : prend deux fractions
         POST : renvoie l'addition simplifié des deux
         """
    #additionne les deux
        nbr1 = self.den * other.num  #3*2
        nbr2 = self.num * other.den #1*6
        numerateur = nbr1 + nbr2
        denominateur = self.den * other.den

    #simplifie
        diviseur = gcd(numerateur, denominateur)

        numerateur_simplifie = numerateur // diviseur
        denominateur_simplifie = denominateur // diviseur
        return f"{numerateur_simplifie}/{denominateur_simplifie}"


    def __sub__(self, other):
        """Overloading of the - operator for fractions

        PRE : ?
        POST : ?
        """
        pass

    def __mul__(self, other):
        """Overloading of the * operator for fractions

        PRE : ?
        POST : ?
        """
        pass

    def __truediv__(self, other):
        """Overloading of the / operator for fractions

        PRE : ?
        POST : ?
        """
        pass

    def __pow__(self, other):
        """Overloading of the ** operator for fractions

        PRE : ?
        POST : ?
        """
        pass

    def __eq__(self, other):
        """Overloading of the == operator for fractions

        PRE : ?
        POST : ?

        """

    def __float__(self):
        """Returns the decimal value of the fraction

        PRE : ?
        POST : ?
        """
        pass

    # TODO : [BONUS] You can overload other operators if you wish (ex : <, >, ...)

    # ------------------ Properties checking ------------------

    def is_zero(self):
        """Check if a fraction's value is 0

        PRE : ?
        POST : ?
        """
        pass

    def is_integer(self):
        """Check if a fraction is integer (ex : 8/4, 3, 2/2, ...)

        PRE : ?
        POST : ?
        """
        pass

    def is_proper(self):
        """Check if the absolute value of the fraction is < 1

        PRE : ?
        POST : ?
        """

    def is_unit(self):
        """Check if a fraction's numerator is 1 in its reduced form

        PRE : ?
        POST : ?
        """
        pass

    def is_adjacent_to(self, other):
        """Check if two fractions differ by a unit fraction

        Two fractions are adjacents if the absolute value of the difference them is a unit fraction

        PRE : ?
        POST : ?
        """
        pass


unQuart = Fraction(-2,4)
deuxQuart = Fraction(1,2)
resultat = unQuart.__add__(deuxQuart)
print(resultat)
