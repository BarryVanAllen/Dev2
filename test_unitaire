import unittest
from TP09 import Fraction

class TestFraction(unittest.TestCase):

    def test_initialisation(self):
        f = Fraction(3, -4)
        self.assertEqual(f.numerator, -3)  # Le numérateur devient négatif
        self.assertEqual(f.denominator, 4)  # Le dénominateur est rendu positif

        with self.assertRaises(ZeroDivisionError):
            Fraction(1, 0)  # Le dénominateur 0 doit lever une erreur

        with self.assertRaises(TypeError):
            Fraction(1.5, 2)  # Les num et den doivent être des entiers

    def test_simplification(self):
        f = Fraction(4, 8)
        f.reduce()
        self.assertEqual(f.numerator, 1)
        self.assertEqual(f.denominator, 2)

    def test_addition(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 + f2
        self.assertEqual(result.numerator, 5)
        self.assertEqual(result.denominator, 6)

    def test_soustraction(self):
        f1 = Fraction(1, 2)
        f2 = Fraction(1, 3)
        result = f1 - f2
        self.assertEqual(result.numerator, 1)
        self.assertEqual(result.denominator, 6)

    def test_multiplication(self):
        f1 = Fraction(3, 4)
        f2 = Fraction(2, 3)
        result = f1 * f2
        self.assertEqual(result.numerator, 1)
        self.assertEqual(result.denominator, 2)

    def test_division(self):
        f1 = Fraction(3, 4)
        f2 = Fraction(1, 2)
        result = f1 / f2
        self.assertEqual(result.numerator, 3)
        self.assertEqual(result.denominator, 2)

        with self.assertRaises(ZeroDivisionError):
            f1 / Fraction(0, 1)  # Diviser par une fraction nulle doit lever une erreur

    def test_proprietes(self):
        f = Fraction(4, 8)
        self.assertTrue(f.is_proper())  # La fraction est propre après simplification

        f = Fraction(10, 5)
        self.assertTrue(f.is_integer())  # 10/5 est un entier

        f = Fraction(0, 5)
        self.assertTrue(f.is_zero())  # 0/5 est bien nul

    def test_float_conversion(self):
        f = Fraction(1, 3)
        self.assertAlmostEqual(float(f), 1 / 3, places=5)  # Vérifie la conversion avec une précision donnée

    def test_puissance(self):
        f = Fraction(3, 2)
        result = f ** 2
        self.assertEqual(result.numerator, 9)
        self.assertEqual(result.denominator, 4)

        result = f ** -1
        self.assertEqual(result.numerator, 2)
        self.assertEqual(result.denominator, 3)

        result = f ** 0
        self.assertEqual(result.numerator, 1)
        self.assertEqual(result.denominator, 1)

    def test_egalite(self):
        f1 = Fraction(2, 4)
        f2 = Fraction(1, 2)
        self.assertTrue(f1 == f2)  # Les fractions équivalentes sont égales

        f3 = Fraction(3, 2)
        self.assertFalse(f1 == f3)  # Pas égales

        self.assertTrue(Fraction(4, 2) == 2)  # Comparaison avec un entier

if __name__ == "__main__":
    unittest.main()
